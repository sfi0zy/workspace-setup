# if not running interactively, don't do anything

case $- in
    *i*) ;;
    *) return;;
esac


# âœ“ [08:45 AM] username:hostname ~ $

PS1="\$(if [[ \$? == 0 ]]; then \
        echo \"\[\033[01;32m\]\342\234\223\"; \
    else \
        echo \"\[\033[01;31m\]\342\234\227\"; \
    fi) [\@] \[\033[01;31m\]\u\[\033[01;00m\]:\[\033[01;33m\]\h\[\033[01;34m\] \w\$(if [[ -d .git ]]; then
        echo \"\[\033[01;35m\] | git:\$(git rev-parse --abbrev-ref HEAD) $\[\033[01;33m\]\"; \
    else \
        echo \" $\";
    fi) \[\033[00m\]"


# see bash(1) for more options for history

HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000


# append to the history file, don't overwrite it

shopt -s histappend


# save and reload history after each command finishes

export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"


# use vim as default text editor

export EDITOR=vim


# check the window size after each command

shopt -s checkwinsize


# use >| instead of > for rewrite file with redirected stream

set -o noclobber


# various alias

alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'

alias ls='ls --color=auto'
alias ll='ls -lAhF'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -pv'
alias grep='grep --color=auto'
alias top='htop'

alias bash-reload='source ~/.bashrc'

alias npm-list-global-packages='npm list -g --depth=0'
alias npm-list-global-updates='npm outdated -g --depth=0'
alias npm-update-globals='npm update -g'

alias apt-update-all='sudo apt update && sudo apt upgrade'
alias apt-remove-unused='sudo apt autoremove'

alias check-internet-connection='ping 8.8.8.8 -c 5'

alias serve-this-directory='http-server -c-1'
alias share-this-directory='http-server -c-1 & ngrok http 8080 && kill $!'

alias random-string='cat /dev/urandom | tr -cd "a-f0-9" | head -c 32'

alias git-graph='git log --graph --full-history --all --color \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"'


# add ruby gems and snap packages to PATH

export GEM_HOME="$HOME/gems"
export PATH="$HOME/gems/bin:$PATH"
export PATH="$PATH:/snap/bin"


#######################################
# Archive all documents, except node_modules, encrypt and split it
# Arguments:
#   None
#######################################
backup-documents() {
    set -e

    documents_folder_size=$(du -bs ~/Documents/ | cut -f1)
    space_needed=$((2 * $documents_folder_size))
    free_space=$(df --output=avail -B 1 . | tail -n 1)

    echo "Documents folder size: $(numfmt --to iec $documents_folder_size)"
    echo "Space needed: $(numfmt --to iec $space_needed)"
    echo "Free space: $(numfmt --to iec $free_space)"

    if (( space_needed > free_space )); then
        echo "You need more free space to perform this."
        return 1
    fi

    echo "Enter password:"
    read -s password_for_archive
    echo "Enter the same password second time:"
    read -s password_for_archive_copy

    if [[ $password_for_archive != $password_for_archive_copy ]]; then
        echo "Two entered passwords are different. It'll be safer to try again."
        return 1
    fi

    echo "OK"
    current_date=$(date '+%Y-%j')
    archive_filename="backup_${current_date}"
    echo "Archive name will be ${archive_filename}"
    echo "Archiving (this may take some time)..."
    zip -r "${archive_filename}.zip" ~/Documents/ -x *node_modules*
    echo "OK"

    echo "Testing archive..."
    unzip -t "${archive_filename}.zip"
    echo "OK"

    echo "Encrypting archive (this may take some time)..."
    gpg --pinentry-mode=loopback --yes \
        --passphrase $password_for_archive \
        --output "${archive_filename}.gpg" \
        --symmetric "${archive_filename}.zip"
    echo "OK"

    echo "Removing unencrypted archive..."
    rm "${archive_filename}.zip"
    echo "OK"

    echo "Splitting archive (this may take some time)..."
    split --bytes=500M "${archive_filename}.gpg"
    mkdir -p $archive_filename
    mv x* $archive_filename
    echo "OK"

    echo "Removing unsplitted archive..."
    rm "${archive_filename}.gpg"
    echo "OK"

    echo "Encrypted and splitted archive is in ${archive_filename} directory"

    echo "The backup has been created. It's time to copy it."
    notify-send "The backup has been created. It's time to copy it."
}


#######################################
# Concat, decrypt and extract backup created with backup-documents()
# Arguments:
#   None
#######################################
extract-backup() {
    set -e

    echo "Enter password:"
    read -s password_for_archive
    echo "OK"

    echo "Concatting files (this may take some time)..."
    cat x* > backup.gpg
    echo "OK"

    echo "Removing splitted archive..."
    rm x*
    echo "OK"

    echo "Decrypting archive (this may take some time)..."
    gpg --pinentry-mode=loopback --yes \
        --passphrase $password_for_archive \
        --output backup.zip \
        --decrypt backup.gpg
    echo "OK"

    echo "Removing encrypted archive..."
    rm backup.gpg
    echo "OK"

    echo "Extracing archive (this may take some time)..."
    unzip backup.zip
    echo "OK"

    echo "Removing archive..."
    rm backup.zip
    echo "OK"

    echo "Finished."
}

